LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY two_process_fsm IS
	PORT (w, reset, clock : IN STD_LOGIC;
         z : OUT STD_LOGIC;
		   y : OUT STD_LOGIC_VECTOR(8 DOWNTO 0));
END two_process_fsm;

ARCHITECTURE Behavior OF two_process_fsm IS

TYPE State_type IS (A, B, C, D, E, F, G, H, I);

SIGNAL y_Q, Y_D : State_type; -- y_Q is present state, y_D is next state

BEGIN

NEXT_STATE_EVALUATION: 

	PROCESS (w, y_Q) -- state table

		BEGIN

		CASE y_Q IS
		
		WHEN A => IF (w = '0') THEN 
		             Y_D <= B;
					 ELSE 
					     Y_D <= F;
		          END IF;
		
		WHEN B => IF (w = '0') THEN
		             Y_D <= C;
					 ELSE
						 Y_D <= E;
					 END IF;
		
		WHEN C => IF (w = '0') THEN 
		             Y_D <= D;
					 ELSE 
					     Y_D <= F;
		          END IF;
		
		WHEN D => IF (w = '0') THEN
		             Y_D <= E;
					 ELSE
						 Y_D <= F;
					 END IF;
	   
		WHEN E => IF (w = '0') THEN 
		             Y_D <= E;
					 ELSE 
					     Y_D <= F;
		          END IF;
		
		WHEN F => IF (w = '0') THEN
		             Y_D <= B;
					 ELSE
						 Y_D <= G;
					 END IF;
		
		WHEN G => IF (w = '0') THEN 
		             Y_D <= B;
					 ELSE 
					     Y_D <= H;
		          END IF;
		
		WHEN H => IF (w = '0') THEN
		             Y_D <= B;
					 ELSE
						 Y_D <= I;
					 END IF;
	
      WHEN I => IF (w = '0') THEN
		             Y_D <= I;
					 ELSE
						 Y_D <= B;
					 END IF;	
		
      WHEN OTHERS => Y_D <= A;
 		
      END CASE;

END PROCESS; -- state table
	
CURRENT_STATE_TRANSITION:
	
	PROCESS (Clock) -- state flip-flops
		BEGIN
			IF clock'EVENT AND clock = '1' THEN
				IF reset = '0' THEN
				  
				  Y_Q <= A;
				
				ELSE
				
				  Y_Q <= Y_D;
				
				END IF;
			
			END IF;
			
	END PROCESS;
	
FSM_OUTPUTS:

	PROCESS (Y_Q)
	
		BEGIN
		
			z <= '0';
			y <= (OTHERS => '0');
			
		CASE y_Q IS
	
			WHEN A =>
			
			z <= '0';
			y(0) <= '1';
			
			WHEN B =>
			
			z <= '0';
			y(1) <= '1';
			
			WHEN C =>
			
			z <= '0';
			y(2) <= '1';
			
			WHEN D =>
			
			z <= '0';
			y(3) <= '1';
			
			WHEN E =>
			
			z <= '1';
			y(4) <= '1';
			
			WHEN F =>
			
			z <= '0';
			y(5) <= '1';
			
			WHEN G =>
			
			z <= '0';
			y(6) <= '1';
			
			WHEN H =>
			
			z <= '0';
			y(7) <= '1';
			
			WHEN I => 
			
			z <= '1';
			y(8) <= '1';
			
			WHEN OTHERS =>	
			
			z <= '0';
			y <= (OTHERS => '0');
		
	   END CASE;
		
	END PROCESS;	

	
